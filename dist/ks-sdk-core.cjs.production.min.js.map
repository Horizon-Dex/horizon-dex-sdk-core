{"version":3,"file":"ks-sdk-core.cjs.production.min.js","sources":["../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/weth.ts","../src/entities/token.ts","../src/entities/ether.ts","../src/utils/sqrt.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import { Token } from '..'\nimport { CurrencyAmount } from './currencyAmount'\nexport class TokenAmount extends CurrencyAmount<Token> {}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n","import { Token } from './token'\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  MATIC = 137,\n  MUMBAI = 80001,\n  BSCTESTNET = 97,\n  BSCMAINNET = 56,\n  AVAXTESTNET = 43113,\n  AVAXMAINNET = 43114,\n  FANTOM = 250,\n  CRONOSTESTNET = 338,\n  CRONOS = 25,\n  ARBITRUM = 42161,\n  ARBITRUM_TESTNET = 421611,\n  BTTC = 199,\n  VELAS = 106,\n  AURORA = 1313161554,\n  OASIS = 42262,\n  OPTIMISM = 10,\n  ETHW = 10001,\n  METISTESTNET = 599,\n  PULSTESTNET4 = 943,\n  LINEATESTNET = 59140,\n  LINEA = 59144,\n  BASETESTNET = 84531\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ETHW]: new Token(ChainId.ETHW, '0x7Bf88d2c0e32dE92CdaF2D43CcDc23e8Edfd5990', 18, 'WETHW', 'Wrapped ETHPoW'),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0x48f6D7dAE56623Dde5a0D56B283165cAE1753D70', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.MUMBAI]: new Token(\n    ChainId.MUMBAI,\n    '0x19395624C030A11f58e820C3AeFb1f5960d9742a',\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.BSCTESTNET]: new Token(\n    ChainId.BSCTESTNET,\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.BSCMAINNET]: new Token(\n    ChainId.BSCMAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.AVAXTESTNET]: new Token(\n    ChainId.AVAXTESTNET,\n    '0x1D308089a2D1Ced3f1Ce36B1FcaF815b07217be3',\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.AVAXMAINNET]: new Token(\n    ChainId.AVAXMAINNET,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.FANTOM]: new Token(\n    ChainId.FANTOM,\n    '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n    18,\n    'WFTM',\n    'Wrapped Fantom'\n  ),\n  [ChainId.CRONOSTESTNET]: new Token(\n    ChainId.CRONOSTESTNET,\n    '0x1A46dCaC1d91F1731574BEfAEDaC4E0392726e35',\n    18,\n    'WCRO',\n    'Wrapped CRO'\n  ),\n  [ChainId.CRONOS]: new Token(ChainId.CRONOS, '0x5C7F8A570d578ED84E63fdFA7b1eE72dEae1AE23', 18, 'WCRO', 'Wrapped CRO'),\n\n  [ChainId.ARBITRUM]: new Token(\n    ChainId.ARBITRUM,\n    '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.BTTC]: new Token(\n    ChainId.BTTC,\n    '0x8D193c6efa90BCFf940A98785d1Ce9D093d3DC8A',\n    18,\n    'WBTT',\n    'Wrapped BitTorrent'\n  ),\n  [ChainId.VELAS]: new Token(ChainId.VELAS, '0xc579D1f3CF86749E05CD06f7ADe17856c2CE3126', 18, 'WVLX', 'Wrapped VLX'),\n  [ChainId.AURORA]: new Token(ChainId.AURORA, '0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB', 18, 'WETH', 'Wrapped ETH'),\n  [ChainId.OASIS]: new Token(ChainId.OASIS, '0x21C718C22D52d0F3a789b752D4c2fD5908a8A733', 18, 'WROSE', 'Wrapped ROSE'),\n  [ChainId.OPTIMISM]: new Token(\n    ChainId.OPTIMISM,\n    '0x4200000000000000000000000000000000000006',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.METISTESTNET]: new Token(\n    ChainId.METISTESTNET,\n    '0x577dDC8c1bb948cdcF123Cd1f453Be80875Ec1F3',\n    18,\n    'WMETIS',\n    'Wrapped Metis'\n  ),\n  [ChainId.PULSTESTNET4]: new Token(\n    ChainId.PULSTESTNET4,\n    '0x70499adEBB11Efd915E3b69E700c331778628707',\n    18,\n    'WPLS',\n    'Wrapped PLS'\n  ),\n  [ChainId.LINEATESTNET]: new Token(\n    ChainId.LINEATESTNET,\n    '0x2C1b868d6596a18e32E61B901E4060C872647b6C',\n    18,\n    'wETH',\n    'Wrapped ETH'\n  ),\n  [ChainId.LINEA]: new Token(\n      ChainId.LINEA,\n      '0xe5D7C2a44FfDDf6b295A15c148167daaAf5Cf34f',\n      18,\n      'wETH',\n      'Wrapped ETH'\n  ),\n  [ChainId.BASETESTNET]: new Token(\n      ChainId.BASETESTNET,\n      '0x4200000000000000000000000000000000000006',\n      18,\n      'wETH',\n      'Wrapped ETH'\n  )\n}\n","import invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  public constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '.'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH } from './weth'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH[this.chainId as ChainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n"],"names":["TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","this","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","_this","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","_Fraction","toExact","isToken","wrapped","TokenAmount","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","chainId","symbol","name","isSafeInteger","NativeCurrency","validateAndParseAddress","address","getAddress","error","ChainId","Token","sortsBefore","toLowerCase","WETH","MAINNET","ETHW","ROPSTEN","RINKEBY","GÖRLI","KOVAN","MATIC","MUMBAI","BSCTESTNET","BSCMAINNET","AVAXTESTNET","AVAXMAINNET","FANTOM","CRONOSTESTNET","CRONOS","ARBITRUM","ARBITRUM_TESTNET","BTTC","VELAS","AURORA","OASIS","OPTIMISM","METISTESTNET","PULSTESTNET4","LINEATESTNET","LINEA","BASETESTNET","Ether","_NativeCurrency","onChain","_etherCache","isNative","weth9","MAX_SAFE_INTEGER","ZERO","ONE","TWO","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","value","greaterThanOrEqual","Math","floor","sqrt","toNumber","z","x"],"mappings":"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"}